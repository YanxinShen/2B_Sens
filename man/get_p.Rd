% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_p.R
\name{get_p}
\alias{get_p}
\title{Perform Sensitivity Analysis and Compute P-Values}
\usage{
get_p(
  d1,
  d2,
  F0.1 = 0,
  F0.2 = 0,
  alpha1 = 0.0125,
  alpha2 = NA,
  rank = FALSE,
  test_beta = 0,
  gamma = gamma,
  conv_test = TRUE,
  params = list(),
  tol = 1e-05,
  verbose = TRUE,
  nbreak = 10
)
}
\arguments{
\item{d1}{A list or data frame representing the first dataset. It should contain:
\itemize{
\item \code{q}: A vector of quantile values.
\item \code{phat}: A vector of predicted probabilities.
\item \code{Z}: A binary vector indicating observed responses.
\item \code{index}: A grouping index for the data.
\item \code{upper}: Upper bounds for constraints.
\item \code{lower}: Lower bounds for constraints.
}}

\item{d2}{A list or data frame representing the second dataset, with the same structure as \code{d1}.}

\item{F0.1}{A numeric value representing the initial objective for dataset 1. Default is 0.}

\item{F0.2}{A numeric value representing the initial objective for dataset 2. Default is 0.}

\item{alpha1}{A numeric value specifying the first-stage significance level. Default is 0.0125.}

\item{alpha2}{A numeric value specifying the second-stage significance level. Default is \code{NA}.}

\item{rank}{Logical. If \code{TRUE}, ranks the \code{q_vec} values. Default is \code{FALSE}.}

\item{test_beta}{A numeric value used to adjust \code{q_vec} when \code{Z == 1}. Default is 0.}

\item{gamma}{A numeric value specifying the gamma parameter for constraints.}

\item{conv_test}{Logical. If \code{TRUE}, performs a convergence test. Default is \code{TRUE}.}

\item{params}{A list of parameters to pass to the Gurobi solver.}

\item{tol}{A numeric value specifying the tolerance for optimization convergence. Default is \code{1e-5}.}

\item{verbose}{Logical. If \code{TRUE}, prints detailed progress information. Default is \code{TRUE}.}

\item{nbreak}{An integer specifying the maximum number of iterations allowed before terminating the process in case of errors. Default is 10.}
}
\value{
A list containing:
\itemize{
\item \code{bigH}: Combined result of the hypothesis test.
\item \code{H0.1}: Hypothesis test result for dataset 1.
\item \code{H0.2}: Hypothesis test result for dataset 2.
\item \code{obj.1}: Objective value for dataset 1.
\item \code{obj.2}: Objective value for dataset 2.
\item \code{pvalue.1}: P-value for dataset 1.
\item \code{pvalue.2}: P-value for dataset 2.
}
}
\description{
This function performs sensitivity analysis and computes p-values for two datasets, using
quadratic programming optimization and hypothesis testing. The results include objectives,
p-values, and hypothesis test results for each dataset.
}
\details{
The function iteratively adjusts the chi-squared critical value \code{c1} until convergence, using
quadratic programming to compute objectives and constraints. Sensitivity analysis is performed to test
the null hypothesis for each dataset, and p-values are computed based on the resulting chi-squared statistics.

The function assumes that the required helper functions such as \code{get_Q}, \code{get_w}, \code{constr},
and \code{cal_gurobi} are defined elsewhere and available in the environment.
}
\examples{
# Example usage of the maintest function

# Load a preprocessed dataset (replace 'sample_data' with your actual data object)
data(sample_data)

# Extract variables from the dataset
treated_lst <- sample_data$treated_lst
control_lst <- sample_data$control_lst
Z <- sample_data$dataset$Z  # Treatment assignment
X <- sample_data$dataset$X  # Covariates
R <- sample_data$dataset$R  # Outcome variable

# Preprocess
dts = preprocess(treated_lst, control_lst, Z, X, R)
d1 = dts[[1]]
d2 = dts[[2]]

# Set parameters for hypothesis testing
F0.1 <- 0  # Gamma test result for the first group
F0.2 <- 0  # Gamma test result for the second group
alpha1 <- 0.0125  # Significance level for the first stage
alpha2 <- 0.025   # Significance level for the second stage
rank <- FALSE     # Whether to use rank transformation
test_beta <- 0    # Adjust observed treatment effect
gamma <- 4        # Sensitivity parameter
conv_test <- FALSE # Use main test
params <- list(TimeLimit = 1000)  # Gurobi solver parameters

# Perform hypothesis testing
result <- get_p(
  d1 = d1,
  d2 = d2,
  F0.1 = F0.1,
  F0.2 = F0.2,
  alpha1 = alpha1,
  alpha2 = alpha2,
  rank = rank,
  test_beta = test_beta,
  gamma = gamma,
  conv_test = conv_test,
  params = params
)

# View the result
print(result)

}
